apiVersion: apps/v1
kind: Deployment
metadata:
  name: fleetman-webapp-advanced
  labels:
    app: fleetman-webapp
    version: advanced
    environment: production
  annotations:
    deployment.kubernetes.io/revision: "1"
    prometheus.io/scrape: "true"
    prometheus.io/port: "80"
spec:
  replicas: 5
  selector:
    matchLabels:
      app: fleetman-webapp
      version: advanced
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  minReadySeconds: 30
  progressDeadlineSeconds: 600
  revisionHistoryLimit: 10
  template:
    metadata:
      labels:
        app: fleetman-webapp
        version: advanced
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "80"
        prometheus.io/path: "/metrics"
    spec:
      # Security context for the pod
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      
      # Service account
      serviceAccountName: fleetman-webapp-sa
      
      # Node selector
      nodeSelector:
        disktype: ssd
        environment: production
      
      # Tolerations
      tolerations:
      - key: "dedicated"
        operator: "Equal"
        value: "frontend"
        effect: "NoSchedule"
      
      # Affinity rules
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - fleetman-webapp
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/os
                operator: In
                values:
                - linux
      
      containers:
      - name: webapp
        image: richardchesterwood/k8s-fleetman-webapp-angular:release0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        
        # Environment variables from multiple sources
        env:
        - name: APP_VERSION
          value: "1.0.0"
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "info"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: CPU_REQUEST
          valueFrom:
            resourceFieldRef:
              containerName: webapp
              resource: requests.cpu
        
        # Environment from ConfigMap and Secret
        envFrom:
        - configMapRef:
            name: webapp-config
            optional: true
        - secretRef:
            name: webapp-secrets
            optional: true
        
        # Resource limits and requests
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
            ephemeral-storage: 2Gi
          requests:
            cpu: 250m
            memory: 256Mi
            ephemeral-storage: 1Gi
        
        # Liveness probe
        livenessProbe:
          httpGet:
            path: /
            port: 80
            httpHeaders:
            - name: X-Health-Check
              value: liveness
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        # Readiness probe
        readinessProbe:
          httpGet:
            path: /
            port: 80
            httpHeaders:
            - name: X-Health-Check
              value: readiness
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        
        # Startup probe for slow starting containers
        startupProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 30
        
        # Security context for container
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
        
        # Volume mounts
        volumeMounts:
        - name: cache-volume
          mountPath: /var/cache/nginx
        - name: run-volume
          mountPath: /var/run
        - name: config-volume
          mountPath: /etc/config
          readOnly: true
        - name: secret-volume
          mountPath: /etc/secrets
          readOnly: true
        
        # Lifecycle hooks
        lifecycle:
          postStart:
            exec:
              command:
              - /bin/sh
              - -c
              - echo "Container started at $(date)" > /var/run/startup.log
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - |
                echo "Gracefully shutting down..."
                sleep 10
      
      # Volumes
      volumes:
      - name: cache-volume
        emptyDir:
          sizeLimit: 1Gi
      - name: run-volume
        emptyDir:
          medium: Memory
      - name: config-volume
        configMap:
          name: webapp-advanced-config
          optional: true
          items:
          - key: app.conf
            path: app.conf
          - key: nginx.conf
            path: nginx.conf
      - name: secret-volume
        secret:
          secretName: webapp-advanced-secrets
          optional: true
          defaultMode: 0400
      
      # DNS configuration
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0
      
      # Restart policy
      restartPolicy: Always
      
      # Termination grace period
      terminationGracePeriodSeconds: 30
      
      # Priority class
      priorityClassName: high-priority
      
      # Host aliases
      hostAliases:
      - ip: "127.0.0.1"
        hostnames:
        - "local.webapp"
      
      # Image pull secrets
      imagePullSecrets:
      - name: regcred
---
apiVersion: v1
kind: Service
metadata:
  name: fleetman-webapp-advanced-service
  labels:
    app: fleetman-webapp
    version: advanced
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
spec:
  selector:
    app: fleetman-webapp
    version: advanced
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  type: LoadBalancer
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
---
# ConfigMap for advanced deployment
apiVersion: v1
kind: ConfigMap
metadata:
  name: webapp-advanced-config
data:
  app.conf: |
    # Application configuration
    server {
        listen 80;
        server_name localhost;
        
        location / {
            root /usr/share/nginx/html;
            index index.html;
        }
        
        location /health {
            access_log off;
            return 200 "OK";
        }
    }
  nginx.conf: |
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 1024;
    }
---
# ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fleetman-webapp-sa
  labels:
    app: fleetman-webapp
---
# PodDisruptionBudget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: fleetman-webapp-pdb
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: fleetman-webapp
      version: advanced
---
# HorizontalPodAutoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: fleetman-webapp-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: fleetman-webapp-advanced
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
