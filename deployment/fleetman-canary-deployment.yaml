# Fleetman Canary Deployment Example
# Demonstrates gradual rollout from release0 to release0-5

---
# Stable version deployment (release0 - current production)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fleetman-webapp-stable
  labels:
    app: fleetman-webapp
    version: stable
spec:
  replicas: 9  # 90% of traffic
  selector:
    matchLabels:
      app: fleetman-webapp
      version: stable
  template:
    metadata:
      labels:
        app: fleetman-webapp
        version: stable
    spec:
      containers:
      - name: fleetman-webapp
        image: richardchesterwood/k8s-fleetman-webapp-angular:release0
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10

---
# Canary version deployment (release0-5 - new version for testing)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fleetman-webapp-canary
  labels:
    app: fleetman-webapp
    version: canary
spec:
  replicas: 1  # 10% of traffic initially
  selector:
    matchLabels:
      app: fleetman-webapp
      version: canary
  template:
    metadata:
      labels:
        app: fleetman-webapp
        version: canary
    spec:
      containers:
      - name: fleetman-webapp
        image: richardchesterwood/k8s-fleetman-webapp-angular:release0-5
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10

---
# Service that routes traffic to both versions
apiVersion: v1
kind: Service
metadata:
  name: fleetman-webapp
spec:
  selector:
    app: fleetman-webapp  # Matches both stable and canary
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  type: NodePort
  nodePort: 30080  # Optional: for external access
