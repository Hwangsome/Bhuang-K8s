# 1. 创建 ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: app-service-account
  namespace: default
---
# 2. 创建 Role（定义权限）
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pod-reader
  namespace: default
rules:
- apiGroups: [""]  # "" 表示核心 API 组
  resources: ["pods", "pods/log"]  # 可以访问 pods 和 pod 日志
  verbs: ["get", "list", "watch"]  # 允许的操作
- apiGroups: [""]
  resources: ["configmaps", "secrets"]  # 添加对 secrets 的访问权限
  verbs: ["get", "list"]  # 允许获取和列出 secrets
---
# 3. 创建 RoleBinding（将 Role 绑定到 ServiceAccount）
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pod-reader-binding
  namespace: default
subjects:
- kind: ServiceAccount
  name: app-service-account
  namespace: default
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io
---
# 4. 创建使用该 ServiceAccount 的 Pod
apiVersion: v1
kind: Pod
metadata:
  name: sa-test-pod
spec:
  serviceAccountName: app-service-account  # 使用我们创建的 ServiceAccount
  containers:
  - name: kubectl-container
    image: bitnami/kubectl:latest
    command: ["sleep", "3600"]  # 保持容器运行
    resources:
      limits:
        memory: "128Mi"
        cpu: "100m"
---
# 5. 创建一个 Secret 供 ServiceAccount 使用
apiVersion: v1
kind: Secret
metadata:
  name: app-secret
  annotations:
    kubernetes.io/service-account.name: app-service-account
type: kubernetes.io/service-account-token
---
# 6. 创建一个 ConfigMap 用于测试访问权限
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  app.properties: |
    environment=development
    log.level=debug
---
# 7. 创建一个用于测试的 Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-deployment
  labels:
    app: test-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: test-app
  template:
    metadata:
      labels:
        app: test-app
    spec:
      serviceAccountName: app-service-account  # 使用自定义 ServiceAccount
      containers:
      - name: nginx
        image: nginx:1.25.3
        ports:
        - containerPort: 80
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
      volumes:
      - name: config-volume
        configMap:
          name: app-config
